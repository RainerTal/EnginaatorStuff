{
  "version": 3,
  "sources": ["../../@zag-js/pagination/dist/index.mjs"],
  "sourcesContent": ["import { createAnatomy } from '@zag-js/anatomy';\nimport { dataAttr } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/pagination.anatomy.ts\nvar anatomy = createAnatomy(\"pagination\").parts(\"root\", \"item\", \"ellipsis\", \"prevTrigger\", \"nextTrigger\");\nvar parts = anatomy.build();\n\n// src/pagination.dom.ts\nvar getRootId = (ctx) => ctx.ids?.root ?? `pagination:${ctx.id}`;\nvar getPrevTriggerId = (ctx) => ctx.ids?.prevTrigger ?? `pagination:${ctx.id}:prev`;\nvar getNextTriggerId = (ctx) => ctx.ids?.nextTrigger ?? `pagination:${ctx.id}:next`;\nvar getEllipsisId = (ctx, index) => ctx.ids?.ellipsis?.(index) ?? `pagination:${ctx.id}:ellipsis:${index}`;\nvar getItemId = (ctx, page) => ctx.ids?.item?.(page) ?? `pagination:${ctx.id}:item:${page}`;\n\n// src/pagination.utils.ts\nvar range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({ length }, (_, idx) => idx + start);\n};\nvar transform = (items) => {\n  return items.map((value) => {\n    if (typeof value === \"number\") return { type: \"page\", value };\n    return { type: \"ellipsis\" };\n  });\n};\nvar ELLIPSIS = \"ellipsis\";\nvar getRange = (ctx) => {\n  const { page, totalPages, siblingCount } = ctx;\n  const totalPageNumbers = Math.min(2 * siblingCount + 5, totalPages);\n  const firstPageIndex = 1;\n  const lastPageIndex = totalPages;\n  const leftSiblingIndex = Math.max(page - siblingCount, firstPageIndex);\n  const rightSiblingIndex = Math.min(page + siblingCount, lastPageIndex);\n  const showLeftEllipsis = leftSiblingIndex > firstPageIndex + 1;\n  const showRightEllipsis = rightSiblingIndex < lastPageIndex - 1;\n  const itemCount = totalPageNumbers - 2;\n  if (!showLeftEllipsis && showRightEllipsis) {\n    const leftRange = range(1, itemCount);\n    return [...leftRange, ELLIPSIS, lastPageIndex];\n  }\n  if (showLeftEllipsis && !showRightEllipsis) {\n    const rightRange = range(lastPageIndex - itemCount + 1, lastPageIndex);\n    return [firstPageIndex, ELLIPSIS, ...rightRange];\n  }\n  if (showLeftEllipsis && showRightEllipsis) {\n    const middleRange = range(leftSiblingIndex, rightSiblingIndex);\n    return [firstPageIndex, ELLIPSIS, ...middleRange, ELLIPSIS, lastPageIndex];\n  }\n  const fullRange = range(firstPageIndex, lastPageIndex);\n  return fullRange;\n};\nvar getTransformedRange = (ctx) => transform(getRange(ctx));\n\n// src/pagination.connect.ts\nfunction connect(service, normalize) {\n  const { send, scope, prop, computed, context } = service;\n  const totalPages = computed(\"totalPages\");\n  const page = context.get(\"page\");\n  const translations = prop(\"translations\");\n  const count = prop(\"count\");\n  const previousPage = computed(\"previousPage\");\n  const nextPage = computed(\"nextPage\");\n  const pageRange = computed(\"pageRange\");\n  const type = prop(\"type\");\n  const isButton = type === \"button\";\n  const isFirstPage = page === 1;\n  const isLastPage = page === totalPages;\n  const pages = getTransformedRange({\n    page,\n    totalPages,\n    siblingCount: prop(\"siblingCount\")\n  });\n  return {\n    count,\n    page,\n    pageSize: context.get(\"pageSize\"),\n    totalPages,\n    pages,\n    previousPage,\n    nextPage,\n    pageRange,\n    slice(data) {\n      return data.slice(pageRange.start, pageRange.end);\n    },\n    setPageSize(size) {\n      send({ type: \"SET_PAGE_SIZE\", size });\n    },\n    setPage(page2) {\n      send({ type: \"SET_PAGE\", page: page2 });\n    },\n    goToNextPage() {\n      send({ type: \"NEXT_PAGE\" });\n    },\n    goToPrevPage() {\n      send({ type: \"PREVIOUS_PAGE\" });\n    },\n    goToFirstPage() {\n      send({ type: \"FIRST_PAGE\" });\n    },\n    goToLastPage() {\n      send({ type: \"LAST_PAGE\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: getRootId(scope),\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        \"aria-label\": translations.rootLabel\n      });\n    },\n    getEllipsisProps(props2) {\n      return normalize.element({\n        id: getEllipsisId(scope, props2.index),\n        ...parts.ellipsis.attrs,\n        dir: prop(\"dir\")\n      });\n    },\n    getItemProps(props2) {\n      const index = props2.value;\n      const isCurrentPage = index === page;\n      return normalize.element({\n        id: getItemId(scope, index),\n        ...parts.item.attrs,\n        dir: prop(\"dir\"),\n        \"data-index\": index,\n        \"data-selected\": dataAttr(isCurrentPage),\n        \"aria-current\": isCurrentPage ? \"page\" : void 0,\n        \"aria-label\": translations.itemLabel?.({ page: index, totalPages }),\n        onClick() {\n          send({ type: \"SET_PAGE\", page: index });\n        },\n        ...isButton && { type: \"button\" }\n      });\n    },\n    getPrevTriggerProps() {\n      return normalize.element({\n        id: getPrevTriggerId(scope),\n        ...parts.prevTrigger.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(isFirstPage),\n        \"aria-label\": translations.prevTriggerLabel,\n        onClick() {\n          send({ type: \"PREVIOUS_PAGE\" });\n        },\n        ...isButton && { disabled: isFirstPage, type: \"button\" }\n      });\n    },\n    getNextTriggerProps() {\n      return normalize.element({\n        id: getNextTriggerId(scope),\n        ...parts.nextTrigger.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(isLastPage),\n        \"aria-label\": translations.nextTriggerLabel,\n        onClick() {\n          send({ type: \"NEXT_PAGE\" });\n        },\n        ...isButton && { disabled: isLastPage, type: \"button\" }\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      defaultPageSize: 10,\n      siblingCount: 1,\n      defaultPage: 1,\n      type: \"button\",\n      count: 1,\n      ...props2,\n      translations: {\n        rootLabel: \"pagination\",\n        prevTriggerLabel: \"previous page\",\n        nextTriggerLabel: \"next page\",\n        itemLabel({ page, totalPages }) {\n          const isLastPage = totalPages > 1 && page === totalPages;\n          return `${isLastPage ? \"last page, \" : \"\"}page ${page}`;\n        },\n        ...props2.translations\n      }\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      page: bindable(() => ({\n        value: prop(\"page\"),\n        defaultValue: prop(\"defaultPage\"),\n        onChange(value) {\n          const context = getContext();\n          prop(\"onPageChange\")?.({ page: value, pageSize: context.get(\"pageSize\") });\n        }\n      })),\n      pageSize: bindable(() => ({\n        value: prop(\"pageSize\"),\n        defaultValue: prop(\"defaultPageSize\"),\n        onChange(value) {\n          prop(\"onPageSizeChange\")?.({ pageSize: value });\n        }\n      }))\n    };\n  },\n  watch({ track, context, action }) {\n    track([() => context.get(\"pageSize\")], () => {\n      action([\"setPageIfNeeded\"]);\n    });\n  },\n  computed: {\n    totalPages: ({ context, prop }) => Math.ceil(prop(\"count\") / context.get(\"pageSize\")),\n    previousPage: ({ context }) => context.get(\"page\") === 1 ? null : context.get(\"page\") - 1,\n    nextPage: ({ context, computed }) => context.get(\"page\") === computed(\"totalPages\") ? null : context.get(\"page\") + 1,\n    pageRange: ({ context, prop }) => {\n      const start = (context.get(\"page\") - 1) * context.get(\"pageSize\");\n      const end = Math.min(start + context.get(\"pageSize\"), prop(\"count\"));\n      return { start, end };\n    },\n    isValidPage: ({ context, computed }) => context.get(\"page\") >= 1 && context.get(\"page\") <= computed(\"totalPages\")\n  },\n  on: {\n    SET_PAGE: {\n      guard: \"isValidPage\",\n      actions: [\"setPage\"]\n    },\n    SET_PAGE_SIZE: {\n      actions: [\"setPageSize\"]\n    },\n    FIRST_PAGE: {\n      actions: [\"goToFirstPage\"]\n    },\n    LAST_PAGE: {\n      actions: [\"goToLastPage\"]\n    },\n    PREVIOUS_PAGE: {\n      guard: \"canGoToPrevPage\",\n      actions: [\"goToPrevPage\"]\n    },\n    NEXT_PAGE: {\n      guard: \"canGoToNextPage\",\n      actions: [\"goToNextPage\"]\n    }\n  },\n  states: {\n    idle: {}\n  },\n  implementations: {\n    guards: {\n      isValidPage: ({ event, computed }) => event.page >= 1 && event.page <= computed(\"totalPages\"),\n      isValidCount: ({ context, event }) => context.get(\"page\") > event.count,\n      canGoToNextPage: ({ context, computed }) => context.get(\"page\") < computed(\"totalPages\"),\n      canGoToPrevPage: ({ context }) => context.get(\"page\") > 1\n    },\n    actions: {\n      setPage({ context, event, computed }) {\n        const page = clampPage(event.page, computed(\"totalPages\"));\n        context.set(\"page\", page);\n      },\n      setPageSize({ context, event }) {\n        context.set(\"pageSize\", event.size);\n      },\n      goToFirstPage({ context }) {\n        context.set(\"page\", 1);\n      },\n      goToLastPage({ context, computed }) {\n        context.set(\"page\", computed(\"totalPages\"));\n      },\n      goToPrevPage({ context, computed }) {\n        context.set(\"page\", (prev) => clampPage(prev - 1, computed(\"totalPages\")));\n      },\n      goToNextPage({ context, computed }) {\n        context.set(\"page\", (prev) => clampPage(prev + 1, computed(\"totalPages\")));\n      },\n      setPageIfNeeded({ context, computed }) {\n        if (computed(\"isValidPage\")) return;\n        context.set(\"page\", 1);\n      }\n    }\n  }\n});\nvar clampPage = (page, totalPages) => Math.min(Math.max(page, 1), totalPages);\nvar props = createProps()([\n  \"count\",\n  \"dir\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"onPageChange\",\n  \"onPageSizeChange\",\n  \"page\",\n  \"defaultPage\",\n  \"pageSize\",\n  \"defaultPageSize\",\n  \"siblingCount\",\n  \"translations\",\n  \"type\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"value\", \"type\"]);\nvar splitItemProps = createSplitProps(itemProps);\nvar ellipsisProps = createProps()([\"index\"]);\nvar splitEllipsisProps = createSplitProps(ellipsisProps);\n\nexport { anatomy, connect, ellipsisProps, itemProps, machine, props, splitEllipsisProps, splitItemProps, splitProps };\n"],
  "mappings": "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",
  "names": []
}
