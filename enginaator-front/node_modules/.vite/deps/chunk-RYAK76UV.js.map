{
  "version": 3,
  "sources": ["../../@zag-js/avatar/dist/index.mjs"],
  "sourcesContent": ["import { createAnatomy } from '@zag-js/anatomy';\nimport { observeAttributes, observeChildren } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/avatar.anatomy.ts\nvar anatomy = createAnatomy(\"avatar\").parts(\"root\", \"image\", \"fallback\");\nvar parts = anatomy.build();\n\n// src/avatar.dom.ts\nvar getRootId = (ctx) => ctx.ids?.root ?? `avatar:${ctx.id}`;\nvar getImageId = (ctx) => ctx.ids?.image ?? `avatar:${ctx.id}:image`;\nvar getFallbackId = (ctx) => ctx.ids?.fallback ?? `avatar:${ctx.id}:fallback`;\nvar getRootEl = (ctx) => ctx.getById(getRootId(ctx));\nvar getImageEl = (ctx) => ctx.getById(getImageId(ctx));\n\n// src/avatar.connect.ts\nfunction connect(service, normalize) {\n  const { state, send, prop, scope } = service;\n  const loaded = state.matches(\"loaded\");\n  return {\n    loaded,\n    setSrc(src) {\n      const img = getImageEl(scope);\n      img?.setAttribute(\"src\", src);\n    },\n    setLoaded() {\n      send({ type: \"img.loaded\", src: \"api\" });\n    },\n    setError() {\n      send({ type: \"img.error\", src: \"api\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope)\n      });\n    },\n    getImageProps() {\n      return normalize.img({\n        ...parts.image.attrs,\n        hidden: !loaded,\n        dir: prop(\"dir\"),\n        id: getImageId(scope),\n        \"data-state\": loaded ? \"visible\" : \"hidden\",\n        onLoad() {\n          send({ type: \"img.loaded\", src: \"element\" });\n        },\n        onError() {\n          send({ type: \"img.error\", src: \"element\" });\n        }\n      });\n    },\n    getFallbackProps() {\n      return normalize.element({\n        ...parts.fallback.attrs,\n        dir: prop(\"dir\"),\n        id: getFallbackId(scope),\n        hidden: loaded,\n        \"data-state\": loaded ? \"hidden\" : \"visible\"\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  initialState() {\n    return \"loading\";\n  },\n  effects: [\"trackImageRemoval\", \"trackSrcChange\"],\n  on: {\n    \"src.change\": {\n      target: \"loading\"\n    },\n    \"img.unmount\": {\n      target: \"error\"\n    }\n  },\n  states: {\n    loading: {\n      entry: [\"checkImageStatus\"],\n      on: {\n        \"img.loaded\": {\n          target: \"loaded\",\n          actions: [\"invokeOnLoad\"]\n        },\n        \"img.error\": {\n          target: \"error\",\n          actions: [\"invokeOnError\"]\n        }\n      }\n    },\n    error: {\n      on: {\n        \"img.loaded\": {\n          target: \"loaded\",\n          actions: [\"invokeOnLoad\"]\n        }\n      }\n    },\n    loaded: {\n      on: {\n        \"img.error\": {\n          target: \"error\",\n          actions: [\"invokeOnError\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      invokeOnLoad({ prop }) {\n        prop(\"onStatusChange\")?.({ status: \"loaded\" });\n      },\n      invokeOnError({ prop }) {\n        prop(\"onStatusChange\")?.({ status: \"error\" });\n      },\n      checkImageStatus({ send, scope }) {\n        const imageEl = getImageEl(scope);\n        if (!imageEl?.complete) return;\n        const type = hasLoaded(imageEl) ? \"img.loaded\" : \"img.error\";\n        send({ type, src: \"ssr\" });\n      }\n    },\n    effects: {\n      trackImageRemoval({ send, scope }) {\n        const rootEl = getRootEl(scope);\n        return observeChildren(rootEl, {\n          callback(records) {\n            const removedNodes = Array.from(records[0].removedNodes);\n            const removed = removedNodes.find(\n              (node) => node.nodeType === Node.ELEMENT_NODE && node.matches(\"[data-scope=avatar][data-part=image]\")\n            );\n            if (removed) {\n              send({ type: \"img.unmount\" });\n            }\n          }\n        });\n      },\n      trackSrcChange({ send, scope }) {\n        const imageEl = getImageEl(scope);\n        return observeAttributes(imageEl, {\n          attributes: [\"src\", \"srcset\"],\n          callback() {\n            send({ type: \"src.change\" });\n          }\n        });\n      }\n    }\n  }\n});\nfunction hasLoaded(image) {\n  return image.complete && image.naturalWidth !== 0 && image.naturalHeight !== 0;\n}\nvar props = createProps()([\"dir\", \"id\", \"ids\", \"onStatusChange\", \"getRootNode\"]);\nvar splitProps = createSplitProps(props);\n\nexport { anatomy, connect, machine, props, splitProps };\n"],
  "mappings": "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",
  "names": []
}
