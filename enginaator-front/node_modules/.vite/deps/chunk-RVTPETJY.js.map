{
  "version": 3,
  "sources": ["../../@zag-js/collection/dist/index.mjs", "../../@zag-js/combobox/dist/index.mjs"],
  "sourcesContent": ["import { compact, isEqual, chunk, prevIndex, nextIndex, isObject, hasProp } from '@zag-js/utils';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar fallback = {\n  itemToValue(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"value\")) return item.value;\n    return \"\";\n  },\n  itemToString(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"label\")) return item.label;\n    return fallback.itemToValue(item);\n  },\n  isItemDisabled(item) {\n    if (isObject(item) && hasProp(item, \"disabled\")) return !!item.disabled;\n    return false;\n  }\n};\nvar ListCollection = class _ListCollection {\n  constructor(options) {\n    this.options = options;\n    /**\n     * The items in the collection\n     */\n    __publicField(this, \"items\");\n    __publicField(this, \"copy\", (items) => {\n      return new _ListCollection({ ...this.options, items: items ?? [...this.items] });\n    });\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(this.items, other.items);\n    });\n    /**\n     * Function to update the collection items\n     */\n    __publicField(this, \"setItems\", (items) => {\n      return this.copy(items);\n    });\n    /**\n     * Returns all the values in the collection\n     */\n    __publicField(this, \"getValues\", (items = this.items) => {\n      return Array.from(items).map((item) => this.getItemValue(item)).filter(Boolean);\n    });\n    /**\n     * Get the item based on its value\n     */\n    __publicField(this, \"find\", (value) => {\n      if (value == null) return null;\n      const index = this.items.findIndex((item) => this.getItemValue(item) === value);\n      return index != null ? this.items[index] : null;\n    });\n    /**\n     * Get the items based on its values\n     */\n    __publicField(this, \"findMany\", (values) => {\n      return Array.from(values).map((value) => this.find(value)).filter((item) => item != null);\n    });\n    /**\n     * Get the item based on its index\n     */\n    __publicField(this, \"at\", (index) => {\n      return this.items[index] ?? null;\n    });\n    __publicField(this, \"sortFn\", (valueA, valueB) => {\n      const indexA = this.indexOf(valueA);\n      const indexB = this.indexOf(valueB);\n      return (indexA ?? 0) - (indexB ?? 0);\n    });\n    /**\n     * Sort the values based on their index\n     */\n    __publicField(this, \"sort\", (values) => {\n      return [...values].sort(this.sortFn.bind(this));\n    });\n    /**\n     * Convert an item to a value\n     */\n    __publicField(this, \"getItemValue\", (item) => {\n      if (item == null) return null;\n      return this.options.itemToValue?.(item) ?? fallback.itemToValue(item);\n    });\n    /**\n     * Whether an item is disabled\n     */\n    __publicField(this, \"getItemDisabled\", (item) => {\n      if (item == null) return false;\n      return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item);\n    });\n    /**\n     * Convert an item to a string\n     */\n    __publicField(this, \"stringifyItem\", (item) => {\n      if (item == null) return null;\n      return this.options.itemToString?.(item) ?? fallback.itemToString(item);\n    });\n    /**\n     * Convert a value to a string\n     */\n    __publicField(this, \"stringify\", (value) => {\n      if (value == null) return null;\n      return this.stringifyItem(this.find(value));\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyItems\", (items, separator = \", \") => {\n      return Array.from(items).map((item) => this.stringifyItem(item)).filter(Boolean).join(separator);\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyMany\", (value, separator) => {\n      return this.stringifyItems(this.findMany(value), separator);\n    });\n    /**\n     * Whether the collection has a value\n     */\n    __publicField(this, \"has\", (value) => {\n      return this.indexOf(value) !== -1;\n    });\n    /**\n     * Whether the collection has an item\n     */\n    __publicField(this, \"hasItem\", (item) => {\n      if (item == null) return false;\n      return this.has(this.getItemValue(item));\n    });\n    /**\n     * Returns the next value in the collection\n     */\n    __publicField(this, \"getNextValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.min(index + step, this.size - 1) : index + step;\n      while (index <= this.size && this.getItemDisabled(this.at(index))) index++;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Returns the previous value in the collection\n     */\n    __publicField(this, \"getPreviousValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.max(index - step, 0) : index - step;\n      while (index >= 0 && this.getItemDisabled(this.at(index))) index--;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Get the index of an item based on its key\n     */\n    __publicField(this, \"indexOf\", (value) => {\n      if (value == null) return -1;\n      return this.items.findIndex((item) => this.getItemValue(item) === value);\n    });\n    __publicField(this, \"getByText\", (text, current) => {\n      let items = current != null ? wrap(this.items, this.indexOf(current)) : this.items;\n      const isSingleKey = text.length === 1;\n      if (isSingleKey) items = items.filter((item) => this.getItemValue(item) !== current);\n      return items.find((item) => match(this.stringifyItem(item), text));\n    });\n    /**\n     * Search for a value based on a query\n     */\n    __publicField(this, \"search\", (queryString, options) => {\n      const { state, currentValue, timeout = 350 } = options;\n      const search = state.keysSoFar + queryString;\n      const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n      const query = isRepeated ? search[0] : search;\n      const item = this.getByText(query, currentValue);\n      const value = this.getItemValue(item);\n      function cleanup() {\n        clearTimeout(state.timer);\n        state.timer = -1;\n      }\n      function update(value2) {\n        state.keysSoFar = value2;\n        cleanup();\n        if (value2 !== \"\") {\n          state.timer = +setTimeout(() => {\n            update(\"\");\n            cleanup();\n          }, timeout);\n        }\n      }\n      update(search);\n      return value;\n    });\n    __publicField(this, \"update\", (value, item) => {\n      let index = this.items.findIndex((item2) => this.getItemValue(item2) === value);\n      if (index === -1) return this;\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    __publicField(this, \"insert\", (index, ...items) => {\n      return this.copy(insert(this.items, index, ...items));\n    });\n    __publicField(this, \"insertBefore\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;\n        else return this;\n      }\n      return this.copy(insert(this.items, toIndex, ...items));\n    });\n    __publicField(this, \"insertAfter\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;\n        else return this;\n      }\n      return this.copy(insert(this.items, toIndex + 1, ...items));\n    });\n    __publicField(this, \"prepend\", (...items) => {\n      return this.copy(insert(this.items, 0, ...items));\n    });\n    __publicField(this, \"append\", (...items) => {\n      return this.copy(insert(this.items, this.items.length, ...items));\n    });\n    __publicField(this, \"filter\", (fn) => {\n      const filteredItems = this.items.filter((item, index) => fn(this.stringifyItem(item), index));\n      return this.copy(filteredItems);\n    });\n    __publicField(this, \"remove\", (...itemsOrValues) => {\n      const values = itemsOrValues.map(\n        (itemOrValue) => typeof itemOrValue === \"string\" ? itemOrValue : this.getItemValue(itemOrValue)\n      );\n      return this.copy(\n        this.items.filter((item) => {\n          const value = this.getItemValue(item);\n          if (value == null) return false;\n          return !values.includes(value);\n        })\n      );\n    });\n    __publicField(this, \"move\", (value, toIndex) => {\n      const fromIndex = this.indexOf(value);\n      if (fromIndex === -1) return this;\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    __publicField(this, \"reorder\", (fromIndex, toIndex) => {\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    __publicField(this, \"compareValue\", (a, b) => {\n      const indexA = this.indexOf(a);\n      const indexB = this.indexOf(b);\n      if (indexA < indexB) return -1;\n      if (indexA > indexB) return 1;\n      return 0;\n    });\n    __publicField(this, \"range\", (from, to) => {\n      let keys = [];\n      let key = from;\n      while (key != null) {\n        let item = this.find(key);\n        if (item) keys.push(key);\n        if (key === to) return keys;\n        key = this.getNextValue(key);\n      }\n      return [];\n    });\n    __publicField(this, \"getValueRange\", (from, to) => {\n      if (from && to) {\n        if (this.compareValue(from, to) <= 0) {\n          return this.range(from, to);\n        }\n        return this.range(to, from);\n      }\n      return [];\n    });\n    __publicField(this, \"toString\", () => {\n      let result = \"\";\n      for (const item of this.items) {\n        const value = this.getItemValue(item);\n        const label = this.stringifyItem(item);\n        const disabled = this.getItemDisabled(item);\n        const itemString = [value, label, disabled].filter(Boolean).join(\":\");\n        result += itemString + \",\";\n      }\n      return result;\n    });\n    __publicField(this, \"toJSON\", () => {\n      return {\n        size: this.size,\n        first: this.firstValue,\n        last: this.lastValue\n      };\n    });\n    this.items = [...options.items];\n  }\n  /**\n   * Returns the number of items in the collection\n   */\n  get size() {\n    return this.items.length;\n  }\n  /**\n   * Returns the first value in the collection\n   */\n  get firstValue() {\n    let index = 0;\n    while (this.getItemDisabled(this.at(index))) index++;\n    return this.getItemValue(this.at(index));\n  }\n  /**\n   * Returns the last value in the collection\n   */\n  get lastValue() {\n    let index = this.size - 1;\n    while (this.getItemDisabled(this.at(index))) index--;\n    return this.getItemValue(this.at(index));\n  }\n  *[Symbol.iterator]() {\n    yield* this.items;\n  }\n};\nvar match = (label, query) => {\n  return !!label?.toLowerCase().startsWith(query.toLowerCase());\n};\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction isListCollection(v) {\n  return v instanceof ListCollection;\n}\nfunction insert(items, index, ...values) {\n  return [...items.slice(0, index), ...values, ...items.slice(index)];\n}\nfunction move(items, indices, toIndex) {\n  indices = [...indices].sort((a, b) => a - b);\n  const itemsToMove = indices.map((i) => items[i]);\n  for (let i = indices.length - 1; i >= 0; i--) {\n    items = [...items.slice(0, indices[i]), ...items.slice(indices[i] + 1)];\n  }\n  toIndex = Math.max(0, toIndex - indices.filter((i) => i < toIndex).length);\n  return [...items.slice(0, toIndex), ...itemsToMove, ...items.slice(toIndex)];\n}\n\n// src/grid-collection.ts\nvar GridCollection = class extends ListCollection {\n  constructor(options) {\n    const { columnCount } = options;\n    super(options);\n    __publicField(this, \"columnCount\");\n    /**\n     * Returns the row data in the grid\n     */\n    __publicField(this, \"getRows\", () => {\n      return chunk([...this.items], this.columnCount);\n    });\n    /**\n     * Returns the number of rows in the grid\n     */\n    __publicField(this, \"getRowCount\", () => {\n      return this.getRows().length;\n    });\n    /**\n     * Returns the index of the specified row and column in the grid\n     */\n    __publicField(this, \"getCellIndex\", (row, column) => {\n      return row * this.columnCount + column;\n    });\n    /**\n     * Returns the item at the specified row and column in the grid\n     */\n    __publicField(this, \"getCell\", (row, column) => {\n      return this.at(this.getCellIndex(row, column));\n    });\n    /**\n     * Returns the row and column index for a given value\n     */\n    __publicField(this, \"getValueCell\", (value) => {\n      const index = this.indexOf(value);\n      if (index === -1) return null;\n      const row = Math.floor(index / this.columnCount);\n      const column = index % this.columnCount;\n      return { row, column };\n    });\n    /**\n     * Returns the value of the last enabled column in a row\n     */\n    __publicField(this, \"getLastEnabledColumnIndex\", (row) => {\n      for (let col = this.columnCount - 1; col >= 0; col--) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the index of the first enabled column in a row\n     */\n    __publicField(this, \"getFirstEnabledColumnIndex\", (row) => {\n      for (let col = 0; col < this.columnCount; col++) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the value of the previous row in the grid, based on the current value\n     */\n    __publicField(this, \"getPreviousRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let prevRowIndex = currentCell.row;\n      let prevColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        prevRowIndex = prevIndex(rows, prevRowIndex, { loop });\n        const prevRow = rows[prevRowIndex];\n        if (!prevRow) continue;\n        const prevCell = prevRow[prevColumnIndex];\n        if (!prevCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(prevRowIndex);\n          if (lastColumnIndex != null) {\n            prevColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(prevRowIndex, prevColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.firstValue;\n    });\n    /**\n     * Returns the value of the next row in the grid, based on the current value\n     */\n    __publicField(this, \"getNextRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let nextRowIndex = currentCell.row;\n      let nextColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        nextRowIndex = nextIndex(rows, nextRowIndex, { loop });\n        const nextRow = rows[nextRowIndex];\n        if (!nextRow) continue;\n        const nextCell = nextRow[nextColumnIndex];\n        if (!nextCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(nextRowIndex);\n          if (lastColumnIndex != null) {\n            nextColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(nextRowIndex, nextColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.lastValue;\n    });\n    this.columnCount = columnCount;\n  }\n};\nfunction isGridCollection(v) {\n  return v instanceof GridCollection;\n}\n\n// src/tree-visit.ts\nfunction access(node, indexPath, options) {\n  for (let i = 0; i < indexPath.length; i++) node = options.getChildren(node, indexPath.slice(i + 1))[indexPath[i]];\n  return node;\n}\nfunction ancestorIndexPaths(indexPaths) {\n  const sortedPaths = sortIndexPaths(indexPaths);\n  const result = [];\n  const seen = /* @__PURE__ */ new Set();\n  for (const indexPath of sortedPaths) {\n    const key = indexPath.join();\n    if (!seen.has(key)) {\n      seen.add(key);\n      result.push(indexPath);\n    }\n  }\n  return result;\n}\nfunction compareIndexPaths(a, b) {\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] < b[i]) return -1;\n    if (a[i] > b[i]) return 1;\n  }\n  return a.length - b.length;\n}\nfunction sortIndexPaths(indexPaths) {\n  return indexPaths.sort(compareIndexPaths);\n}\nfunction find(node, options) {\n  let found;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = child;\n        return \"stop\";\n      }\n    }\n  });\n  return found;\n}\nfunction findIndexPath(node, options) {\n  let found;\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = [...indexPath];\n        return \"stop\";\n      }\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction reduce(node, options) {\n  let result = options.initialResult;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      result = options.nextResult(result, child, indexPath);\n    }\n  });\n  return result;\n}\nfunction flatMap(node, options) {\n  return reduce(node, {\n    ...options,\n    initialResult: [],\n    nextResult: (result, child, indexPath) => {\n      result.push(...options.transform(child, indexPath));\n      return result;\n    }\n  });\n}\nfunction insertOperation(index, nodes) {\n  return { type: \"insert\", index, nodes };\n}\nfunction removeOperation(indexes) {\n  return { type: \"remove\", indexes };\n}\nfunction replaceOperation() {\n  return { type: \"replace\" };\n}\nfunction splitIndexPath(indexPath) {\n  return [indexPath.slice(0, -1), indexPath[indexPath.length - 1]];\n}\nfunction getInsertionOperations(indexPath, nodes, operations = /* @__PURE__ */ new Map()) {\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    switch (operations.get(parentKey)?.type) {\n      case \"remove\":\n        continue;\n    }\n    operations.set(parentKey, replaceOperation());\n  }\n  const operation = operations.get(parentIndexPath.join());\n  switch (operation?.type) {\n    case \"remove\":\n      operations.set(parentIndexPath.join(), {\n        type: \"removeThenInsert\",\n        removeIndexes: operation.indexes,\n        insertIndex: index,\n        insertNodes: nodes\n      });\n      break;\n    default:\n      operations.set(parentIndexPath.join(), insertOperation(index, nodes));\n  }\n  return operations;\n}\nfunction getRemovalOperations(indexPaths) {\n  const operations = /* @__PURE__ */ new Map();\n  const indexesToRemove = /* @__PURE__ */ new Map();\n  for (const indexPath of indexPaths) {\n    const parentKey = indexPath.slice(0, -1).join();\n    const value = indexesToRemove.get(parentKey) ?? [];\n    value.push(indexPath[indexPath.length - 1]);\n    indexesToRemove.set(\n      parentKey,\n      value.sort((a, b) => a - b)\n    );\n  }\n  for (const indexPath of indexPaths) {\n    for (let i = indexPath.length - 2; i >= 0; i--) {\n      const parentKey = indexPath.slice(0, i).join();\n      if (!operations.has(parentKey)) {\n        operations.set(parentKey, replaceOperation());\n      }\n    }\n  }\n  for (const [parentKey, indexes] of indexesToRemove) {\n    operations.set(parentKey, removeOperation(indexes));\n  }\n  return operations;\n}\nfunction getReplaceOperations(indexPath, node) {\n  const operations = /* @__PURE__ */ new Map();\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    operations.set(parentKey, replaceOperation());\n  }\n  operations.set(parentIndexPath.join(), {\n    type: \"removeThenInsert\",\n    removeIndexes: [index],\n    insertIndex: index,\n    insertNodes: [node]\n  });\n  return operations;\n}\nfunction mutate(node, operations, options) {\n  return map(node, {\n    ...options,\n    getChildren: (node2, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"replace\":\n        case \"remove\":\n        case \"removeThenInsert\":\n        case \"insert\":\n          return options.getChildren(node2, indexPath);\n        default:\n          return [];\n      }\n    },\n    transform: (node2, children, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"remove\":\n          return options.create(\n            node2,\n            children.filter((_, index) => !operation.indexes.includes(index)),\n            indexPath\n          );\n        case \"removeThenInsert\":\n          const updatedChildren = children.filter((_, index) => !operation.removeIndexes.includes(index));\n          const adjustedIndex = operation.removeIndexes.reduce(\n            (index, removedIndex) => removedIndex < index ? index - 1 : index,\n            operation.insertIndex\n          );\n          return options.create(node2, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);\n        case \"insert\":\n          return options.create(node2, splice(children, operation.index, 0, ...operation.nodes), indexPath);\n        case \"replace\":\n          return options.create(node2, children, indexPath);\n        default:\n          return node2;\n      }\n    }\n  });\n}\nfunction splice(array, start, deleteCount, ...items) {\n  return [...array.slice(0, start), ...items, ...array.slice(start + deleteCount)];\n}\nfunction map(node, options) {\n  const childrenMap = {};\n  visit(node, {\n    ...options,\n    onLeave: (child, indexPath) => {\n      const keyIndexPath = [0, ...indexPath];\n      const key = keyIndexPath.join();\n      const transformed = options.transform(child, childrenMap[key] ?? [], indexPath);\n      const parentKey = keyIndexPath.slice(0, -1).join();\n      const parentChildren = childrenMap[parentKey] ?? [];\n      parentChildren.push(transformed);\n      childrenMap[parentKey] = parentChildren;\n    }\n  });\n  return childrenMap[\"\"][0];\n}\nfunction insert2(node, options) {\n  const { nodes, at } = options;\n  if (at.length === 0) throw new Error(`Can't insert nodes at the root`);\n  const state = getInsertionOperations(at, nodes);\n  return mutate(node, state, options);\n}\nfunction replace(node, options) {\n  if (options.at.length === 0) return options.node;\n  const operations = getReplaceOperations(options.at, options.node);\n  return mutate(node, operations, options);\n}\nfunction remove(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't remove the root node`);\n  }\n  const operations = getRemovalOperations(options.indexPaths);\n  return mutate(node, operations, options);\n}\nfunction move2(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't move the root node`);\n  }\n  if (options.to.length === 0) throw new Error(`Can't move nodes to the root`);\n  const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);\n  const nodesToInsert = _ancestorIndexPaths.map((indexPath) => access(node, indexPath, options));\n  const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));\n  return mutate(node, operations, options);\n}\nfunction visit(node, options) {\n  const { onEnter, onLeave, getChildren } = options;\n  let indexPath = [];\n  let stack = [{ node }];\n  const getIndexPath = options.reuseIndexPath ? () => indexPath : () => indexPath.slice();\n  while (stack.length > 0) {\n    let wrapper = stack[stack.length - 1];\n    if (wrapper.state === void 0) {\n      const enterResult = onEnter?.(wrapper.node, getIndexPath());\n      if (enterResult === \"stop\") return;\n      wrapper.state = enterResult === \"skip\" ? -1 : 0;\n    }\n    const children = wrapper.children || getChildren(wrapper.node, getIndexPath());\n    wrapper.children || (wrapper.children = children);\n    if (wrapper.state !== -1) {\n      if (wrapper.state < children.length) {\n        let currentIndex = wrapper.state;\n        indexPath.push(currentIndex);\n        stack.push({ node: children[currentIndex] });\n        wrapper.state = currentIndex + 1;\n        continue;\n      }\n      const leaveResult = onLeave?.(wrapper.node, getIndexPath());\n      if (leaveResult === \"stop\") return;\n    }\n    indexPath.pop();\n    stack.pop();\n  }\n}\n\n// src/tree-collection.ts\nvar TreeCollection = class {\n  constructor(options) {\n    this.options = options;\n    __publicField(this, \"rootNode\");\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(this.rootNode, other.rootNode);\n    });\n    __publicField(this, \"getNodeChildren\", (node) => {\n      return this.options.nodeToChildren?.(node) ?? fallback2.nodeToChildren(node) ?? [];\n    });\n    __publicField(this, \"getNodeValue\", (node) => {\n      return this.options.nodeToValue?.(node) ?? fallback2.nodeToValue(node);\n    });\n    __publicField(this, \"getNodeDisabled\", (node) => {\n      return this.options.isNodeDisabled?.(node) ?? fallback2.isNodeDisabled(node);\n    });\n    __publicField(this, \"stringify\", (value) => {\n      const node = this.findNode(value);\n      if (!node) return null;\n      return this.stringifyNode(node);\n    });\n    __publicField(this, \"stringifyNode\", (node) => {\n      return this.options.nodeToString?.(node) ?? fallback2.nodeToString(node);\n    });\n    __publicField(this, \"getFirstNode\", (rootNode = this.rootNode) => {\n      let firstChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (!firstChild && indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            firstChild = node;\n            return \"stop\";\n          }\n        }\n      });\n      return firstChild;\n    });\n    __publicField(this, \"getLastNode\", (rootNode = this.rootNode, opts = {}) => {\n      let lastChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) return \"skip\";\n          if (indexPath.length > 1) return \"skip\";\n          if (!this.getNodeDisabled(node)) {\n            lastChild = node;\n          }\n        }\n      });\n      return lastChild;\n    });\n    __publicField(this, \"at\", (indexPath) => {\n      return access(this.rootNode, indexPath, {\n        getChildren: this.getNodeChildren\n      });\n    });\n    __publicField(this, \"findNode\", (value, rootNode = this.rootNode) => {\n      return find(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"sort\", (values) => {\n      return values.reduce(\n        (acc, value) => {\n          const indexPath = this.getIndexPath(value);\n          if (indexPath != null) acc.push({ value, indexPath });\n          return acc;\n        },\n        []\n      ).sort((a, b) => compareIndexPaths(a.indexPath, b.indexPath)).map(({ value }) => value);\n    });\n    __publicField(this, \"getIndexPath\", (value) => {\n      return findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"getValue\", (indexPath) => {\n      const node = this.at(indexPath);\n      return node ? this.getNodeValue(node) : void 0;\n    });\n    __publicField(this, \"getValuePath\", (indexPath) => {\n      if (!indexPath) return [];\n      const valuePath = [];\n      let currentPath = [...indexPath];\n      while (currentPath.length > 0) {\n        const node = this.at(currentPath);\n        if (node) valuePath.unshift(this.getNodeValue(node));\n        currentPath.pop();\n      }\n      return valuePath;\n    });\n    __publicField(this, \"getDepth\", (value) => {\n      const indexPath = findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n      return indexPath?.length ?? 0;\n    });\n    __publicField(this, \"isRootNode\", (node) => {\n      return this.getNodeValue(node) === this.getNodeValue(this.rootNode);\n    });\n    __publicField(this, \"contains\", (parentIndexPath, valueIndexPath) => {\n      if (!parentIndexPath || !valueIndexPath) return false;\n      return valueIndexPath.slice(0, parentIndexPath.length).every((_, i) => parentIndexPath[i] === valueIndexPath[i]);\n    });\n    __publicField(this, \"getNextNode\", (value, opts = {}) => {\n      let found = false;\n      let nextNode;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) {\n            if (nodeValue === value) {\n              found = true;\n            }\n            return \"skip\";\n          }\n          if (found && !this.getNodeDisabled(node)) {\n            nextNode = node;\n            return \"stop\";\n          }\n          if (nodeValue === value) {\n            found = true;\n          }\n        }\n      });\n      return nextNode;\n    });\n    __publicField(this, \"getPreviousNode\", (value, opts = {}) => {\n      let previousNode;\n      let found = false;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) {\n            return \"skip\";\n          }\n          if (nodeValue === value) {\n            found = true;\n            return \"stop\";\n          }\n          if (!this.getNodeDisabled(node)) {\n            previousNode = node;\n          }\n        }\n      });\n      return found ? previousNode : void 0;\n    });\n    __publicField(this, \"getParentNodes\", (values) => {\n      const result = [];\n      let indexPath = this.getIndexPath(values);\n      while (indexPath && indexPath.length > 0) {\n        indexPath.pop();\n        const parentNode = this.at(indexPath);\n        if (parentNode && !this.isRootNode(parentNode)) {\n          result.unshift(parentNode);\n        }\n      }\n      return result;\n    });\n    __publicField(this, \"getParentIndexPath\", (indexPath) => {\n      return indexPath.slice(0, -1);\n    });\n    __publicField(this, \"getParentNode\", (valueOrIndexPath) => {\n      const indexPath = typeof valueOrIndexPath === \"string\" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;\n      return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;\n    });\n    __publicField(this, \"visit\", (opts) => {\n      const { skip, ...rest } = opts;\n      visit(this.rootNode, {\n        ...rest,\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          if (skip?.({ value: this.getNodeValue(node), node, indexPath })) return \"skip\";\n          return rest.onEnter?.(node, indexPath);\n        }\n      });\n    });\n    __publicField(this, \"getPreviousSibling\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = siblings.findIndex((sibling) => this.getValue(indexPath) === this.getNodeValue(sibling));\n      while (--idx >= 0) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getNextSibling\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = siblings.findIndex((sibling) => this.getValue(indexPath) === this.getNodeValue(sibling));\n      while (++idx < siblings.length) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getSiblingNodes\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this.getNodeChildren(parentNode) : [];\n    });\n    __publicField(this, \"getValues\", (rootNode = this.rootNode) => {\n      const values = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: (node) => [this.getNodeValue(node)]\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"isSameDepth\", (indexPath, depth) => {\n      if (depth == null) return true;\n      return indexPath.length === depth;\n    });\n    __publicField(this, \"isBranchNode\", (node) => {\n      return this.getNodeChildren(node).length > 0;\n    });\n    __publicField(this, \"getBranchValues\", (rootNode = this.rootNode, opts = {}) => {\n      let values = [];\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) return \"skip\";\n          if (this.getNodeChildren(node).length > 0 && this.isSameDepth(indexPath, opts.depth)) {\n            values.push(this.getNodeValue(node));\n          }\n        }\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"flatten\", (rootNode = this.rootNode) => {\n      const nodes = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: (node, indexPath) => {\n          const children = this.getNodeChildren(node).map((child) => this.getNodeValue(child));\n          return [\n            compact({\n              label: this.stringifyNode(node),\n              value: this.getNodeValue(node),\n              indexPath,\n              children: children.length > 0 ? children : void 0\n            })\n          ];\n        }\n      });\n      return nodes.slice(1);\n    });\n    __publicField(this, \"_create\", (node, children) => {\n      return compact({ ...node, children });\n    });\n    __publicField(this, \"_insert\", (rootNode, indexPath, nodes) => {\n      return insert2(rootNode, { at: indexPath, nodes, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"_replace\", (rootNode, indexPath, node) => {\n      return replace(rootNode, { at: indexPath, node, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"_move\", (rootNode, indexPaths, to) => {\n      return move2(rootNode, { indexPaths, to, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"_remove\", (rootNode, indexPaths) => {\n      return remove(rootNode, { indexPaths, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"replace\", (indexPath, node) => {\n      return this._replace(this.rootNode, indexPath, node);\n    });\n    __publicField(this, \"remove\", (indexPaths) => {\n      return this._remove(this.rootNode, indexPaths);\n    });\n    __publicField(this, \"insertBefore\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;\n    });\n    __publicField(this, \"insertAfter\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const nextIndex2 = [...indexPath.slice(0, -1), indexPath[indexPath.length - 1] + 1];\n      return this._insert(this.rootNode, nextIndex2, nodes);\n    });\n    __publicField(this, \"move\", (fromIndexPaths, toIndexPath) => {\n      return this._move(this.rootNode, fromIndexPaths, toIndexPath);\n    });\n    __publicField(this, \"toJSON\", () => {\n      return this.getValues(this.rootNode);\n    });\n    this.rootNode = options.rootNode;\n  }\n};\nfunction flattenedToTree(nodes) {\n  let rootNode = {\n    value: \"ROOT\"\n  };\n  nodes.map((node) => {\n    const { indexPath, label, value } = node;\n    if (!indexPath.length) {\n      Object.assign(rootNode, { label, value, children: [] });\n      return;\n    }\n    rootNode = insert2(rootNode, {\n      at: indexPath,\n      nodes: [compact({ label, value })],\n      getChildren: (node2) => node2.children ?? [],\n      create: (node2, children) => {\n        return compact({ ...node2, children });\n      }\n    });\n  });\n  return new TreeCollection({ rootNode });\n}\nfunction filePathToTree(paths) {\n  const rootNode = {\n    label: \"\",\n    value: \"ROOT\",\n    children: []\n  };\n  paths.forEach((path) => {\n    const parts = path.split(\"/\");\n    let currentNode = rootNode;\n    parts.forEach((part) => {\n      let childNode = currentNode.children?.find((child) => child.label === part);\n      if (!childNode) {\n        childNode = {\n          value: parts.slice(0, parts.indexOf(part) + 1).join(\"/\"),\n          label: part\n        };\n        currentNode.children || (currentNode.children = []);\n        currentNode.children.push(childNode);\n      }\n      currentNode = childNode;\n    });\n  });\n  return new TreeCollection({ rootNode });\n}\nvar fallback2 = {\n  nodeToValue(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"value\")) return node.value;\n    return \"\";\n  },\n  nodeToString(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"label\")) return node.label;\n    return fallback2.nodeToValue(node);\n  },\n  isNodeDisabled(node) {\n    if (isObject(node) && hasProp(node, \"disabled\")) return !!node.disabled;\n    return false;\n  },\n  nodeToChildren(node) {\n    return node.children;\n  }\n};\nvar Selection = class _Selection extends Set {\n  constructor(values = []) {\n    super(values);\n    __publicField(this, \"selectionMode\", \"single\");\n    __publicField(this, \"deselectable\", true);\n    __publicField(this, \"copy\", () => {\n      const clone = new _Selection([...this]);\n      return this.sync(clone);\n    });\n    __publicField(this, \"sync\", (other) => {\n      other.selectionMode = this.selectionMode;\n      other.deselectable = this.deselectable;\n      return other;\n    });\n    __publicField(this, \"isEmpty\", () => {\n      return this.size === 0;\n    });\n    __publicField(this, \"isSelected\", (value) => {\n      if (this.selectionMode === \"none\" || value == null) {\n        return false;\n      }\n      return this.has(value);\n    });\n    __publicField(this, \"canSelect\", (collection, value) => {\n      return this.selectionMode !== \"none\" || !collection.getItemDisabled(collection.find(value));\n    });\n    __publicField(this, \"firstSelectedValue\", (collection) => {\n      let firstValue = null;\n      for (let value of this) {\n        if (!firstValue || collection.compareValue(value, firstValue) < 0) {\n          firstValue = value;\n        }\n      }\n      return firstValue;\n    });\n    __publicField(this, \"lastSelectedValue\", (collection) => {\n      let lastValue = null;\n      for (let value of this) {\n        if (!lastValue || collection.compareValue(value, lastValue) > 0) {\n          lastValue = value;\n        }\n      }\n      return lastValue;\n    });\n    __publicField(this, \"extendSelection\", (collection, anchorValue, targetValue) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        return this.replaceSelection(collection, targetValue);\n      }\n      const selection = this.copy();\n      const lastSelected = Array.from(this).pop();\n      for (let key of collection.getValueRange(anchorValue, lastSelected ?? targetValue)) {\n        selection.delete(key);\n      }\n      for (let key of collection.getValueRange(targetValue, anchorValue)) {\n        if (this.canSelect(collection, key)) {\n          selection.add(key);\n        }\n      }\n      return selection;\n    });\n    __publicField(this, \"toggleSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\" && !this.isSelected(value)) {\n        return this.replaceSelection(collection, value);\n      }\n      const selection = this.copy();\n      if (selection.has(value)) {\n        selection.delete(value);\n      } else if (selection.canSelect(collection, value)) {\n        selection.add(value);\n      }\n      return selection;\n    });\n    __publicField(this, \"replaceSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (value == null) {\n        return this;\n      }\n      if (!this.canSelect(collection, value)) {\n        return this;\n      }\n      const selection = new _Selection([value]);\n      return this.sync(selection);\n    });\n    __publicField(this, \"setSelection\", (values) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      let selection = new _Selection();\n      for (let value of values) {\n        if (value != null) {\n          selection.add(value);\n          if (this.selectionMode === \"single\") {\n            break;\n          }\n        }\n      }\n      return this.sync(selection);\n    });\n    __publicField(this, \"clearSelection\", () => {\n      const selection = this.copy();\n      if (selection.deselectable && selection.size > 0) {\n        selection.clear();\n      }\n      return selection;\n    });\n    __publicField(this, \"select\", (collection, value, forceToggle) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(value) && this.deselectable) {\n          return this.toggleSelection(collection, value);\n        } else {\n          return this.replaceSelection(collection, value);\n        }\n      } else if (this.selectionMode === \"multiple\" || forceToggle) {\n        return this.toggleSelection(collection, value);\n      } else {\n        return this.replaceSelection(collection, value);\n      }\n    });\n    __publicField(this, \"deselect\", (value) => {\n      const selection = this.copy();\n      selection.delete(value);\n      return selection;\n    });\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(Array.from(this), Array.from(other));\n    });\n  }\n};\n\nexport { GridCollection, ListCollection, Selection, TreeCollection, filePathToTree, flattenedToTree, isGridCollection, isListCollection };\n", "import { createAnatomy } from '@zag-js/anatomy';\nimport { ListCollection } from '@zag-js/collection';\nimport { raf, setCaretToEnd, observeAttributes, observeChildren, clickIfLink, scrollIntoView, query, dataAttr, ariaAttr, isDownloadingEvent, isOpeningInNewTab, isContextMenuEvent, getEventKey, isLeftClick, isComposingEvent, isAnchorElement } from '@zag-js/dom-query';\nimport { getPlacement, getPlacementStyles } from '@zag-js/popper';\nimport { match, remove, addOrRemove, isBoolean, isEqual, createSplitProps, ensure } from '@zag-js/utils';\nimport { ariaHidden } from '@zag-js/aria-hidden';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { trackDismissableElement } from '@zag-js/dismissable';\nimport { createProps } from '@zag-js/types';\n\n// src/combobox.anatomy.ts\nvar anatomy = createAnatomy(\"combobox\").parts(\n  \"root\",\n  \"clearTrigger\",\n  \"content\",\n  \"control\",\n  \"input\",\n  \"item\",\n  \"itemGroup\",\n  \"itemGroupLabel\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"label\",\n  \"list\",\n  \"positioner\",\n  \"trigger\"\n);\nvar parts = anatomy.build();\nvar collection = (options) => {\n  return new ListCollection(options);\n};\ncollection.empty = () => {\n  return new ListCollection({ items: [] });\n};\nvar getRootId = (ctx) => ctx.ids?.root ?? `combobox:${ctx.id}`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `combobox:${ctx.id}:label`;\nvar getControlId = (ctx) => ctx.ids?.control ?? `combobox:${ctx.id}:control`;\nvar getInputId = (ctx) => ctx.ids?.input ?? `combobox:${ctx.id}:input`;\nvar getContentId = (ctx) => ctx.ids?.content ?? `combobox:${ctx.id}:content`;\nvar getPositionerId = (ctx) => ctx.ids?.positioner ?? `combobox:${ctx.id}:popper`;\nvar getTriggerId = (ctx) => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`;\nvar getClearTriggerId = (ctx) => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`;\nvar getItemGroupId = (ctx, id) => ctx.ids?.itemGroup?.(id) ?? `combobox:${ctx.id}:optgroup:${id}`;\nvar getItemGroupLabelId = (ctx, id) => ctx.ids?.itemGroupLabel?.(id) ?? `combobox:${ctx.id}:optgroup-label:${id}`;\nvar getItemId = (ctx, id) => ctx.ids?.item?.(id) ?? `combobox:${ctx.id}:option:${id}`;\nvar getContentEl = (ctx) => ctx.getById(getContentId(ctx));\nvar getInputEl = (ctx) => ctx.getById(getInputId(ctx));\nvar getPositionerEl = (ctx) => ctx.getById(getPositionerId(ctx));\nvar getControlEl = (ctx) => ctx.getById(getControlId(ctx));\nvar getTriggerEl = (ctx) => ctx.getById(getTriggerId(ctx));\nvar getClearTriggerEl = (ctx) => ctx.getById(getClearTriggerId(ctx));\nvar getItemEl = (ctx, value) => {\n  if (value == null) return;\n  const selector = `[role=option][data-value=\"${CSS.escape(value)}\"`;\n  return query(getContentEl(ctx), selector);\n};\nvar focusInputEl = (ctx) => {\n  const inputEl = getInputEl(ctx);\n  if (ctx.isActiveElement(inputEl)) return;\n  inputEl?.focus({ preventScroll: true });\n};\nvar focusTriggerEl = (ctx) => {\n  const triggerEl = getTriggerEl(ctx);\n  if (ctx.isActiveElement(triggerEl)) return;\n  triggerEl?.focus({ preventScroll: true });\n};\n\n// src/combobox.connect.ts\nfunction connect(service, normalize) {\n  const { context, prop, state, send, scope, computed, event } = service;\n  const translations = prop(\"translations\");\n  const collection2 = prop(\"collection\");\n  const disabled = prop(\"disabled\");\n  const interactive = computed(\"isInteractive\");\n  const invalid = prop(\"invalid\");\n  const readOnly = prop(\"readOnly\");\n  const open = state.hasTag(\"open\");\n  const focused = state.hasTag(\"focused\");\n  const composite = prop(\"composite\");\n  const highlightedValue = context.get(\"highlightedValue\");\n  const popperStyles = getPlacementStyles({\n    ...prop(\"positioning\"),\n    placement: context.get(\"currentPlacement\")\n  });\n  function getItemState(props2) {\n    const disabled2 = collection2.getItemDisabled(props2.item);\n    const value = collection2.getItemValue(props2.item);\n    ensure(value, () => `[zag-js] No value found for item ${JSON.stringify(props2.item)}`);\n    return {\n      value,\n      disabled: Boolean(disabled2 || disabled2),\n      highlighted: highlightedValue === value,\n      selected: context.get(\"value\").includes(value)\n    };\n  }\n  return {\n    focused,\n    open,\n    inputValue: context.get(\"inputValue\"),\n    highlightedValue,\n    highlightedItem: context.get(\"highlightedItem\"),\n    value: context.get(\"value\"),\n    valueAsString: context.get(\"valueAsString\"),\n    hasSelectedItems: computed(\"hasSelectedItems\"),\n    selectedItems: context.get(\"selectedItems\"),\n    collection: prop(\"collection\"),\n    multiple: !!prop(\"multiple\"),\n    disabled: !!disabled,\n    syncSelectedItems() {\n      send({ type: \"SELECTED_ITEMS.SYNC\" });\n    },\n    reposition(options = {}) {\n      send({ type: \"POSITIONING.SET\", options });\n    },\n    setHighlightValue(value) {\n      send({ type: \"HIGHLIGHTED_VALUE.SET\", value });\n    },\n    selectValue(value) {\n      send({ type: \"ITEM.SELECT\", value });\n    },\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value });\n    },\n    setInputValue(value) {\n      send({ type: \"INPUT_VALUE.SET\", value });\n    },\n    clearValue(value) {\n      if (value != null) {\n        send({ type: \"ITEM.CLEAR\", value });\n      } else {\n        send({ type: \"VALUE.CLEAR\" });\n      }\n    },\n    focus() {\n      getInputEl(scope)?.focus();\n    },\n    setOpen(nextOpen) {\n      const open2 = state.hasTag(\"open\");\n      if (open2 === nextOpen) return;\n      send({ type: nextOpen ? \"OPEN\" : \"CLOSE\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        id: getRootId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        htmlFor: getInputId(scope),\n        id: getLabelId(scope),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focus\": dataAttr(focused),\n        onClick(event2) {\n          if (composite) return;\n          event2.preventDefault();\n          getTriggerEl(scope)?.focus({ preventScroll: true });\n        }\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: prop(\"dir\"),\n        id: getControlId(scope),\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-focus\": dataAttr(focused),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid)\n      });\n    },\n    getPositionerProps() {\n      return normalize.element({\n        ...parts.positioner.attrs,\n        dir: prop(\"dir\"),\n        id: getPositionerId(scope),\n        style: popperStyles.floating\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: prop(\"dir\"),\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        name: prop(\"name\"),\n        form: prop(\"form\"),\n        disabled,\n        autoFocus: prop(\"autoFocus\"),\n        required: prop(\"required\"),\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"none\",\n        spellCheck: \"false\",\n        readOnly,\n        placeholder: prop(\"placeholder\"),\n        id: getInputId(scope),\n        type: \"text\",\n        role: \"combobox\",\n        defaultValue: context.get(\"inputValue\"),\n        \"aria-autocomplete\": computed(\"autoComplete\") ? \"both\" : \"list\",\n        \"aria-controls\": getContentId(scope),\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-activedescendant\": highlightedValue ? getItemId(scope, highlightedValue) : void 0,\n        onClick(event2) {\n          if (event2.defaultPrevented) return;\n          if (!prop(\"openOnClick\")) return;\n          if (!interactive) return;\n          send({ type: \"INPUT.CLICK\" });\n        },\n        onFocus() {\n          if (disabled) return;\n          send({ type: \"INPUT.FOCUS\" });\n        },\n        onBlur() {\n          if (disabled) return;\n          send({ type: \"INPUT.BLUR\" });\n        },\n        onChange(event2) {\n          send({ type: \"INPUT.CHANGE\", value: event2.currentTarget.value });\n        },\n        onKeyDown(event2) {\n          if (event2.defaultPrevented) return;\n          if (!interactive) return;\n          if (event2.ctrlKey || event2.shiftKey || isComposingEvent(event2)) return;\n          const openOnKeyPress = prop(\"openOnKeyPress\");\n          const isModifierKey = event2.ctrlKey || event2.metaKey || event2.shiftKey;\n          const keypress = true;\n          const keymap = {\n            ArrowDown(event3) {\n              if (!openOnKeyPress && !open) return;\n              send({ type: event3.altKey ? \"OPEN\" : \"INPUT.ARROW_DOWN\", keypress });\n              event3.preventDefault();\n            },\n            ArrowUp() {\n              if (!openOnKeyPress && !open) return;\n              send({ type: event2.altKey ? \"CLOSE\" : \"INPUT.ARROW_UP\", keypress });\n              event2.preventDefault();\n            },\n            Home(event3) {\n              if (isModifierKey) return;\n              send({ type: \"INPUT.HOME\", keypress });\n              if (open) {\n                event3.preventDefault();\n              }\n            },\n            End(event3) {\n              if (isModifierKey) return;\n              send({ type: \"INPUT.END\", keypress });\n              if (open) {\n                event3.preventDefault();\n              }\n            },\n            Enter(event3) {\n              send({ type: \"INPUT.ENTER\", keypress });\n              if (open) {\n                event3.preventDefault();\n              }\n              const highlightedValue2 = context.get(\"highlightedValue\");\n              const itemEl = getItemEl(scope, highlightedValue2);\n              if (isAnchorElement(itemEl)) {\n                prop(\"navigate\")({ value: highlightedValue2, node: itemEl });\n              }\n            },\n            Escape() {\n              send({ type: \"INPUT.ESCAPE\", keypress });\n              event2.preventDefault();\n            }\n          };\n          const key = getEventKey(event2, { dir: prop(\"dir\") });\n          const exec = keymap[key];\n          exec?.(event2);\n        }\n      });\n    },\n    getTriggerProps(props2 = {}) {\n      return normalize.button({\n        ...parts.trigger.attrs,\n        dir: prop(\"dir\"),\n        id: getTriggerId(scope),\n        \"aria-haspopup\": composite ? \"listbox\" : \"dialog\",\n        type: \"button\",\n        tabIndex: props2.focusable ? void 0 : -1,\n        \"aria-label\": translations.triggerLabel,\n        \"aria-expanded\": open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"aria-controls\": open ? getContentId(scope) : void 0,\n        disabled,\n        \"data-invalid\": dataAttr(invalid),\n        \"data-focusable\": dataAttr(props2.focusable),\n        \"data-readonly\": dataAttr(readOnly),\n        \"data-disabled\": dataAttr(disabled),\n        onFocus() {\n          if (!props2.focusable) return;\n          send({ type: \"INPUT.FOCUS\", src: \"trigger\" });\n        },\n        onClick(event2) {\n          if (event2.defaultPrevented) return;\n          if (!interactive) return;\n          if (!isLeftClick(event2)) return;\n          send({ type: \"TRIGGER.CLICK\" });\n        },\n        onPointerDown(event2) {\n          if (!interactive) return;\n          if (event2.pointerType === \"touch\") return;\n          event2.preventDefault();\n          queueMicrotask(() => {\n            getInputEl(scope)?.focus({ preventScroll: true });\n          });\n        },\n        onKeyDown(event2) {\n          if (event2.defaultPrevented) return;\n          if (composite) return;\n          const keyMap = {\n            ArrowDown() {\n              send({ type: \"INPUT.ARROW_DOWN\", src: \"trigger\" });\n            },\n            ArrowUp() {\n              send({ type: \"INPUT.ARROW_UP\", src: \"trigger\" });\n            }\n          };\n          const key = getEventKey(event2, { dir: prop(\"dir\") });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event2);\n            event2.preventDefault();\n          }\n        }\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        dir: prop(\"dir\"),\n        id: getContentId(scope),\n        role: !composite ? \"dialog\" : \"listbox\",\n        tabIndex: -1,\n        hidden: !open,\n        \"data-state\": open ? \"open\" : \"closed\",\n        \"data-placement\": context.get(\"currentPlacement\"),\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"multiple\") && composite ? true : void 0,\n        \"data-empty\": dataAttr(collection2.size === 0),\n        onPointerDown(event2) {\n          event2.preventDefault();\n        }\n      });\n    },\n    getListProps() {\n      return normalize.element({\n        ...parts.list.attrs,\n        role: !composite ? \"listbox\" : void 0,\n        \"data-empty\": dataAttr(collection2.size === 0),\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"multiple\") && !composite ? true : void 0\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        dir: prop(\"dir\"),\n        id: getClearTriggerId(scope),\n        type: \"button\",\n        tabIndex: -1,\n        disabled,\n        \"data-invalid\": dataAttr(invalid),\n        \"aria-label\": translations.clearTriggerLabel,\n        \"aria-controls\": getInputId(scope),\n        hidden: !context.get(\"value\").length,\n        onPointerDown(event2) {\n          event2.preventDefault();\n        },\n        onClick(event2) {\n          if (event2.defaultPrevented) return;\n          if (!interactive) return;\n          send({ type: \"VALUE.CLEAR\", src: \"clear-trigger\" });\n        }\n      });\n    },\n    getItemState,\n    getItemProps(props2) {\n      const itemState = getItemState(props2);\n      const value = itemState.value;\n      return normalize.element({\n        ...parts.item.attrs,\n        dir: prop(\"dir\"),\n        id: getItemId(scope, value),\n        role: \"option\",\n        tabIndex: -1,\n        \"data-highlighted\": dataAttr(itemState.highlighted),\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        \"aria-selected\": ariaAttr(itemState.highlighted),\n        \"aria-disabled\": ariaAttr(itemState.disabled),\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-value\": itemState.value,\n        onPointerMove() {\n          if (itemState.disabled) return;\n          if (itemState.highlighted) return;\n          send({ type: \"ITEM.POINTER_MOVE\", value });\n        },\n        onPointerLeave() {\n          if (props2.persistFocus) return;\n          if (itemState.disabled) return;\n          const prev = event.previous();\n          const mouseMoved = prev?.type.includes(\"POINTER\");\n          if (!mouseMoved) return;\n          send({ type: \"ITEM.POINTER_LEAVE\", value });\n        },\n        onClick(event2) {\n          if (isDownloadingEvent(event2)) return;\n          if (isOpeningInNewTab(event2)) return;\n          if (isContextMenuEvent(event2)) return;\n          if (itemState.disabled) return;\n          send({ type: \"ITEM.CLICK\", src: \"click\", value });\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-highlighted\": dataAttr(itemState.highlighted)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getItemState(props2);\n      return normalize.element({\n        \"aria-hidden\": true,\n        ...parts.itemIndicator.attrs,\n        dir: prop(\"dir\"),\n        \"data-state\": itemState.selected ? \"checked\" : \"unchecked\",\n        hidden: !itemState.selected\n      });\n    },\n    getItemGroupProps(props2) {\n      const { id } = props2;\n      return normalize.element({\n        ...parts.itemGroup.attrs,\n        dir: prop(\"dir\"),\n        id: getItemGroupId(scope, id),\n        \"aria-labelledby\": getItemGroupLabelId(scope, id),\n        \"data-empty\": dataAttr(collection2.size === 0),\n        role: \"group\"\n      });\n    },\n    getItemGroupLabelProps(props2) {\n      const { htmlFor } = props2;\n      return normalize.element({\n        ...parts.itemGroupLabel.attrs,\n        dir: prop(\"dir\"),\n        id: getItemGroupLabelId(scope, htmlFor),\n        role: \"presentation\"\n      });\n    }\n  };\n}\nvar { and, not } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      loopFocus: true,\n      openOnClick: false,\n      defaultValue: [],\n      closeOnSelect: !props2.multiple,\n      allowCustomValue: false,\n      inputBehavior: \"none\",\n      selectionBehavior: props2.multiple ? \"clear\" : \"replace\",\n      openOnKeyPress: true,\n      openOnChange: true,\n      composite: true,\n      navigate({ node }) {\n        clickIfLink(node);\n      },\n      collection: collection.empty(),\n      ...props2,\n      positioning: {\n        placement: \"bottom\",\n        sameWidth: true,\n        ...props2.positioning\n      },\n      translations: {\n        triggerLabel: \"Toggle suggestions\",\n        clearTriggerLabel: \"Clear value\",\n        ...props2.translations\n      }\n    };\n  },\n  initialState({ prop }) {\n    const open = prop(\"open\") || prop(\"defaultOpen\");\n    return open ? \"suggesting\" : \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      currentPlacement: bindable(() => ({\n        defaultValue: void 0\n      })),\n      value: bindable(() => ({\n        defaultValue: prop(\"defaultValue\"),\n        value: prop(\"value\"),\n        isEqual,\n        hash(value) {\n          return value.join(\",\");\n        },\n        onChange(value) {\n          const context = getContext();\n          const prevSelectedItems = context.get(\"selectedItems\");\n          const collection2 = prop(\"collection\");\n          const nextItems = value.map((v) => {\n            const item = prevSelectedItems.find((item2) => collection2.getItemValue(item2) === v);\n            return item || collection2.find(v);\n          });\n          context.set(\"selectedItems\", nextItems);\n          context.set(\"valueAsString\", collection2.stringifyItems(nextItems));\n          prop(\"onValueChange\")?.({ value, items: nextItems });\n        }\n      })),\n      highlightedValue: bindable(() => ({\n        defaultValue: prop(\"defaultHighlightedValue\") || null,\n        value: prop(\"highlightedValue\"),\n        onChange(value) {\n          const item = prop(\"collection\").find(value);\n          prop(\"onHighlightChange\")?.({ highlightedValue: value, highlightedItem: item });\n        }\n      })),\n      inputValue: bindable(() => {\n        let inputValue = prop(\"inputValue\") || prop(\"defaultInputValue\") || \"\";\n        const value = prop(\"defaultValue\") || prop(\"value\") || [];\n        if (!inputValue.trim() && !prop(\"multiple\")) {\n          const valueAsString = prop(\"collection\").stringifyMany(value);\n          inputValue = match(prop(\"selectionBehavior\"), {\n            preserve: inputValue || valueAsString,\n            replace: valueAsString,\n            clear: \"\"\n          });\n        }\n        return {\n          defaultValue: inputValue,\n          value: prop(\"inputValue\"),\n          onChange(value2) {\n            prop(\"onInputValueChange\")?.({ inputValue: value2 });\n          }\n        };\n      }),\n      highlightedItem: bindable(() => {\n        const highlightedValue = prop(\"highlightedValue\");\n        const highlightedItem = prop(\"collection\").find(highlightedValue);\n        return { defaultValue: highlightedItem };\n      }),\n      selectedItems: bindable(() => {\n        const value = prop(\"value\") || prop(\"defaultValue\") || [];\n        const selectedItems = prop(\"collection\").findMany(value);\n        return { defaultValue: selectedItems };\n      }),\n      valueAsString: bindable(() => {\n        const value = prop(\"value\") || prop(\"defaultValue\") || [];\n        const valueAsString = prop(\"collection\").stringifyMany(value);\n        return { sync: true, defaultValue: valueAsString };\n      })\n    };\n  },\n  computed: {\n    isInputValueEmpty: ({ context }) => context.get(\"inputValue\").length === 0,\n    isInteractive: ({ prop }) => !(prop(\"readOnly\") || prop(\"disabled\")),\n    autoComplete: ({ prop }) => prop(\"inputBehavior\") === \"autocomplete\",\n    autoHighlight: ({ prop }) => prop(\"inputBehavior\") === \"autohighlight\",\n    hasSelectedItems: ({ context }) => context.get(\"value\").length > 0\n  },\n  watch({ context, prop, track, action }) {\n    track([() => context.hash(\"value\")], () => {\n      action([\"syncSelectedItems\"]);\n    });\n    track([() => context.get(\"inputValue\")], () => {\n      action([\"syncInputValue\"]);\n    });\n    track([() => context.get(\"highlightedValue\")], () => {\n      action([\"syncHighlightedItem\", \"autofillInputValue\"]);\n    });\n    track([() => prop(\"open\")], () => {\n      action([\"toggleVisibility\"]);\n    });\n  },\n  on: {\n    \"SELECTED_ITEMS.SYNC\": {\n      actions: [\"syncSelectedItems\"]\n    },\n    \"HIGHLIGHTED_VALUE.SET\": {\n      actions: [\"setHighlightedItem\"]\n    },\n    \"ITEM.SELECT\": {\n      actions: [\"selectItem\"]\n    },\n    \"ITEM.CLEAR\": {\n      actions: [\"clearItem\"]\n    },\n    \"VALUE.SET\": {\n      actions: [\"setValue\"]\n    },\n    \"INPUT_VALUE.SET\": {\n      actions: [\"setInputValue\"]\n    },\n    \"POSITIONING.SET\": {\n      actions: [\"reposition\"]\n    }\n  },\n  states: {\n    idle: {\n      tags: [\"idle\", \"closed\"],\n      entry: [\"scrollContentToTop\", \"clearHighlightedItem\"],\n      on: {\n        \"CONTROLLED.OPEN\": {\n          target: \"interacting\"\n        },\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }\n        ],\n        \"INPUT.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }\n        ],\n        \"INPUT.FOCUS\": {\n          target: \"focused\"\n        },\n        OPEN: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          }\n        ],\n        \"VALUE.CLEAR\": {\n          target: \"focused\",\n          actions: [\"clearInputValue\", \"clearSelectedItems\", \"setInitialFocus\"]\n        }\n      }\n    },\n    focused: {\n      tags: [\"focused\", \"closed\"],\n      entry: [\"scrollContentToTop\", \"clearHighlightedItem\"],\n      on: {\n        \"CONTROLLED.OPEN\": [\n          {\n            guard: \"isChangeEvent\",\n            target: \"suggesting\"\n          },\n          {\n            target: \"interacting\"\n          }\n        ],\n        \"INPUT.CHANGE\": [\n          {\n            guard: and(\"isOpenControlled\", \"openOnChange\"),\n            actions: [\"setInputValue\", \"invokeOnOpen\", \"highlightFirstItemIfNeeded\"]\n          },\n          {\n            guard: \"openOnChange\",\n            target: \"suggesting\",\n            actions: [\"setInputValue\", \"invokeOnOpen\", \"highlightFirstItemIfNeeded\"]\n          },\n          {\n            actions: [\"setInputValue\"]\n          }\n        ],\n        \"LAYER.INTERACT_OUTSIDE\": {\n          target: \"idle\"\n        },\n        \"INPUT.ESCAPE\": {\n          guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n          actions: [\"revertInputValue\"]\n        },\n        \"INPUT.BLUR\": {\n          target: \"idle\"\n        },\n        \"INPUT.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"setInitialFocus\", \"highlightFirstSelectedItem\", \"invokeOnOpen\"]\n          }\n        ],\n        \"INPUT.ARROW_DOWN\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"autoComplete\"),\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            guard: \"autoComplete\",\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          },\n          // == group 2 ==\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"highlightFirstOrSelectedItem\", \"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"highlightFirstOrSelectedItem\", \"invokeOnOpen\"]\n          }\n        ],\n        \"INPUT.ARROW_UP\": [\n          // == group 1 ==\n          {\n            guard: \"autoComplete\",\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            guard: \"autoComplete\",\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          },\n          // == group 2 ==\n          {\n            target: \"interacting\",\n            actions: [\"highlightLastOrSelectedItem\", \"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"highlightLastOrSelectedItem\", \"invokeOnOpen\"]\n          }\n        ],\n        OPEN: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnOpen\"]\n          },\n          {\n            target: \"interacting\",\n            actions: [\"invokeOnOpen\"]\n          }\n        ],\n        \"VALUE.CLEAR\": {\n          actions: [\"clearInputValue\", \"clearSelectedItems\"]\n        }\n      }\n    },\n    interacting: {\n      tags: [\"open\", \"focused\"],\n      entry: [\"setInitialFocus\"],\n      effects: [\"scrollToHighlightedItem\", \"trackDismissableLayer\", \"trackPlacement\", \"hideOtherElements\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [\n          {\n            guard: \"restoreFocus\",\n            target: \"focused\",\n            actions: [\"setFinalFocus\"]\n          },\n          {\n            target: \"idle\"\n          }\n        ],\n        \"INPUT.HOME\": {\n          actions: [\"highlightFirstItem\"]\n        },\n        \"INPUT.END\": {\n          actions: [\"highlightLastItem\"]\n        },\n        \"INPUT.ARROW_DOWN\": [\n          {\n            guard: and(\"autoComplete\", \"isLastItemHighlighted\"),\n            actions: [\"clearHighlightedItem\", \"scrollContentToTop\"]\n          },\n          {\n            actions: [\"highlightNextItem\"]\n          }\n        ],\n        \"INPUT.ARROW_UP\": [\n          {\n            guard: and(\"autoComplete\", \"isFirstItemHighlighted\"),\n            actions: [\"clearHighlightedItem\"]\n          },\n          {\n            actions: [\"highlightPrevItem\"]\n          }\n        ],\n        \"INPUT.ENTER\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"hasHighlightedItem\"), not(\"allowCustomValue\")),\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: and(\"isCustomValue\", not(\"hasHighlightedItem\"), not(\"allowCustomValue\")),\n            target: \"focused\",\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          // == group 2 ==\n          {\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          },\n          {\n            actions: [\"selectHighlightedItem\"]\n          }\n        ],\n        \"INPUT.CHANGE\": [\n          {\n            guard: \"autoComplete\",\n            target: \"suggesting\",\n            actions: [\"setInputValue\"]\n          },\n          {\n            target: \"suggesting\",\n            actions: [\"clearHighlightedItem\", \"setInputValue\"]\n          }\n        ],\n        \"ITEM.POINTER_MOVE\": {\n          actions: [\"setHighlightedItem\"]\n        },\n        \"ITEM.POINTER_LEAVE\": {\n          actions: [\"clearHighlightedItem\"]\n        },\n        \"ITEM.CLICK\": [\n          {\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectItem\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          },\n          {\n            actions: [\"selectItem\"]\n          }\n        ],\n        \"LAYER.ESCAPE\": [\n          {\n            guard: and(\"isOpenControlled\", \"autoComplete\"),\n            actions: [\"syncInputValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"autoComplete\",\n            target: \"focused\",\n            actions: [\"syncInputValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setFinalFocus\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"LAYER.INTERACT_OUTSIDE\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"allowCustomValue\")),\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n            target: \"idle\",\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          // == group 2 ==\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        CLOSE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setFinalFocus\"]\n          }\n        ],\n        \"VALUE.CLEAR\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\", \"setFinalFocus\"]\n          }\n        ]\n      }\n    },\n    suggesting: {\n      tags: [\"open\", \"focused\"],\n      effects: [\n        \"trackDismissableLayer\",\n        \"scrollToHighlightedItem\",\n        \"trackPlacement\",\n        \"trackChildNodes\",\n        \"hideOtherElements\"\n      ],\n      entry: [\"setInitialFocus\"],\n      on: {\n        \"CONTROLLED.CLOSE\": [\n          {\n            guard: \"restoreFocus\",\n            target: \"focused\",\n            actions: [\"setFinalFocus\"]\n          },\n          {\n            target: \"idle\"\n          }\n        ],\n        CHILDREN_CHANGE: {\n          guard: \"autoHighlight\",\n          actions: [\"highlightFirstItem\"]\n        },\n        \"INPUT.ARROW_DOWN\": {\n          target: \"interacting\",\n          actions: [\"highlightNextItem\"]\n        },\n        \"INPUT.ARROW_UP\": {\n          target: \"interacting\",\n          actions: [\"highlightPrevItem\"]\n        },\n        \"INPUT.HOME\": {\n          target: \"interacting\",\n          actions: [\"highlightFirstItem\"]\n        },\n        \"INPUT.END\": {\n          target: \"interacting\",\n          actions: [\"highlightLastItem\"]\n        },\n        \"INPUT.ENTER\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"hasHighlightedItem\"), not(\"allowCustomValue\")),\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: and(\"isCustomValue\", not(\"hasHighlightedItem\"), not(\"allowCustomValue\")),\n            target: \"focused\",\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          // == group 2 ==\n          {\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectHighlightedItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          },\n          {\n            actions: [\"selectHighlightedItem\"]\n          }\n        ],\n        \"INPUT.CHANGE\": {\n          actions: [\"setInputValue\"]\n        },\n        \"LAYER.ESCAPE\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"ITEM.POINTER_MOVE\": {\n          target: \"interacting\",\n          actions: [\"setHighlightedItem\"]\n        },\n        \"ITEM.POINTER_LEAVE\": {\n          actions: [\"clearHighlightedItem\"]\n        },\n        \"LAYER.INTERACT_OUTSIDE\": [\n          // == group 1 ==\n          {\n            guard: and(\"isOpenControlled\", \"isCustomValue\", not(\"allowCustomValue\")),\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          {\n            guard: and(\"isCustomValue\", not(\"allowCustomValue\")),\n            target: \"idle\",\n            actions: [\"revertInputValue\", \"invokeOnClose\"]\n          },\n          // == group 2 ==\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"idle\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"TRIGGER.CLICK\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"invokeOnClose\"]\n          }\n        ],\n        \"ITEM.CLICK\": [\n          {\n            guard: and(\"isOpenControlled\", \"closeOnSelect\"),\n            actions: [\"selectItem\", \"invokeOnClose\"]\n          },\n          {\n            guard: \"closeOnSelect\",\n            target: \"focused\",\n            actions: [\"selectItem\", \"invokeOnClose\", \"setFinalFocus\"]\n          },\n          {\n            actions: [\"selectItem\"]\n          }\n        ],\n        CLOSE: [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"invokeOnClose\", \"setFinalFocus\"]\n          }\n        ],\n        \"VALUE.CLEAR\": [\n          {\n            guard: \"isOpenControlled\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\"]\n          },\n          {\n            target: \"focused\",\n            actions: [\"clearInputValue\", \"clearSelectedItems\", \"invokeOnClose\", \"setFinalFocus\"]\n          }\n        ]\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isInputValueEmpty: ({ computed }) => computed(\"isInputValueEmpty\"),\n      autoComplete: ({ computed, prop }) => computed(\"autoComplete\") && !prop(\"multiple\"),\n      autoHighlight: ({ computed }) => computed(\"autoHighlight\"),\n      isFirstItemHighlighted: ({ prop, context }) => prop(\"collection\").firstValue === context.get(\"highlightedValue\"),\n      isLastItemHighlighted: ({ prop, context }) => prop(\"collection\").lastValue === context.get(\"highlightedValue\"),\n      isCustomValue: ({ context }) => context.get(\"inputValue\") !== context.get(\"valueAsString\"),\n      allowCustomValue: ({ prop }) => !!prop(\"allowCustomValue\"),\n      hasHighlightedItem: ({ context }) => context.get(\"highlightedValue\") != null,\n      closeOnSelect: ({ prop }) => !!prop(\"closeOnSelect\"),\n      isOpenControlled: ({ prop }) => prop(\"open\") != null,\n      openOnChange: ({ prop, context }) => {\n        const openOnChange = prop(\"openOnChange\");\n        if (isBoolean(openOnChange)) return openOnChange;\n        return !!openOnChange?.({ inputValue: context.get(\"inputValue\") });\n      },\n      restoreFocus: ({ event }) => event.restoreFocus == null ? true : !!event.restoreFocus,\n      isChangeEvent: ({ event }) => event.previousEvent?.type === \"INPUT.CHANGE\"\n    },\n    effects: {\n      trackDismissableLayer({ send, prop, scope }) {\n        if (prop(\"disableLayer\")) return;\n        const contentEl = () => getContentEl(scope);\n        return trackDismissableElement(contentEl, {\n          defer: true,\n          exclude: () => [getInputEl(scope), getTriggerEl(scope), getClearTriggerEl(scope)],\n          onFocusOutside: prop(\"onFocusOutside\"),\n          onPointerDownOutside: prop(\"onPointerDownOutside\"),\n          onInteractOutside: prop(\"onInteractOutside\"),\n          onEscapeKeyDown(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            send({ type: \"LAYER.ESCAPE\" });\n          },\n          onDismiss() {\n            send({ type: \"LAYER.INTERACT_OUTSIDE\", restoreFocus: false });\n          }\n        });\n      },\n      hideOtherElements({ scope }) {\n        return ariaHidden([\n          getInputEl(scope),\n          getContentEl(scope),\n          getTriggerEl(scope),\n          getClearTriggerEl(scope)\n        ]);\n      },\n      trackPlacement({ context, prop, scope }) {\n        const anchorEl = () => getControlEl(scope) || getTriggerEl(scope);\n        const positionerEl = () => getPositionerEl(scope);\n        context.set(\"currentPlacement\", prop(\"positioning\").placement);\n        return getPlacement(anchorEl, positionerEl, {\n          ...prop(\"positioning\"),\n          defer: true,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      // in event the options are fetched (async), we still want to auto-highlight the first option\n      trackChildNodes({ scope, computed, send }) {\n        if (!computed(\"autoHighlight\")) return;\n        const exec = () => send({ type: \"CHILDREN_CHANGE\" });\n        const contentEl = () => getContentEl(scope);\n        return observeChildren(contentEl, {\n          callback: exec,\n          defer: true\n        });\n      },\n      scrollToHighlightedItem({ context, prop, scope, event }) {\n        const inputEl = getInputEl(scope);\n        let cleanups = [];\n        const exec = (immediate) => {\n          const pointer = event.current().type.includes(\"POINTER\");\n          const highlightedValue = context.get(\"highlightedValue\");\n          if (pointer || !highlightedValue) return;\n          const itemEl = getItemEl(scope, highlightedValue);\n          const contentEl = getContentEl(scope);\n          const scrollToIndexFn = prop(\"scrollToIndexFn\");\n          if (scrollToIndexFn) {\n            const highlightedIndex = prop(\"collection\").indexOf(highlightedValue);\n            scrollToIndexFn({ index: highlightedIndex, immediate });\n            return;\n          }\n          const raf_cleanup = raf(() => {\n            scrollIntoView(itemEl, { rootEl: contentEl, block: \"nearest\" });\n          });\n          cleanups.push(raf_cleanup);\n        };\n        const rafCleanup = raf(() => exec(true));\n        cleanups.push(rafCleanup);\n        const observerCleanup = observeAttributes(inputEl, {\n          attributes: [\"aria-activedescendant\"],\n          callback: () => exec(false)\n        });\n        cleanups.push(observerCleanup);\n        return () => {\n          cleanups.forEach((cleanup) => cleanup());\n        };\n      }\n    },\n    actions: {\n      reposition({ context, prop, scope, event }) {\n        const controlEl = () => getControlEl(scope);\n        const positionerEl = () => getPositionerEl(scope);\n        getPlacement(controlEl, positionerEl, {\n          ...prop(\"positioning\"),\n          ...event.options,\n          defer: true,\n          listeners: false,\n          onComplete(data) {\n            context.set(\"currentPlacement\", data.placement);\n          }\n        });\n      },\n      setHighlightedItem(params) {\n        const { context, event } = params;\n        if (event.value == null) return;\n        context.set(\"highlightedValue\", event.value);\n      },\n      clearHighlightedItem(params) {\n        const { context } = params;\n        context.set(\"highlightedValue\", null);\n      },\n      selectHighlightedItem(params) {\n        const { context, prop } = params;\n        const highlightedValue = context.get(\"highlightedValue\");\n        if (!highlightedValue) return;\n        const nextValue = prop(\"multiple\") ? addOrRemove(context.get(\"value\"), highlightedValue) : [highlightedValue];\n        prop(\"onSelect\")?.({ value: nextValue, itemValue: highlightedValue });\n        context.set(\"value\", nextValue);\n        context.set(\"inputValue\", getInputValue(params));\n      },\n      selectItem(params) {\n        const { context, event, flush, prop } = params;\n        if (event.value == null) return;\n        flush(() => {\n          const nextValue = prop(\"multiple\") ? addOrRemove(context.get(\"value\"), event.value) : [event.value];\n          prop(\"onSelect\")?.({ value: nextValue, itemValue: event.value });\n          context.set(\"value\", nextValue);\n          context.set(\"inputValue\", getInputValue(params));\n        });\n      },\n      clearItem(params) {\n        const { context, event, flush } = params;\n        if (event.value == null) return;\n        flush(() => {\n          const nextValue = remove(context.get(\"value\"), event.value);\n          context.set(\"value\", nextValue);\n          context.set(\"inputValue\", getInputValue(params));\n        });\n      },\n      setInitialFocus({ scope }) {\n        raf(() => {\n          focusInputEl(scope);\n        });\n      },\n      setFinalFocus({ scope }) {\n        raf(() => {\n          const triggerEl = getTriggerEl(scope);\n          if (triggerEl?.dataset.focusable == null) {\n            focusInputEl(scope);\n          } else {\n            focusTriggerEl(scope);\n          }\n        });\n      },\n      syncInputValue({ context, scope, event }) {\n        const inputEl = getInputEl(scope);\n        if (!inputEl) return;\n        inputEl.value = context.get(\"inputValue\");\n        queueMicrotask(() => {\n          if (event.current().type === \"INPUT.CHANGE\") return;\n          setCaretToEnd(inputEl);\n        });\n      },\n      setInputValue({ context, event }) {\n        context.set(\"inputValue\", event.value);\n      },\n      clearInputValue({ context }) {\n        context.set(\"inputValue\", \"\");\n      },\n      revertInputValue({ context, prop, computed }) {\n        const selectionBehavior = prop(\"selectionBehavior\");\n        const inputValue = match(selectionBehavior, {\n          replace: computed(\"hasSelectedItems\") ? context.get(\"valueAsString\") : \"\",\n          preserve: context.get(\"inputValue\"),\n          clear: \"\"\n        });\n        context.set(\"inputValue\", inputValue);\n      },\n      setValue(params) {\n        const { context, flush, event } = params;\n        flush(() => {\n          context.set(\"value\", event.value);\n          context.set(\"inputValue\", getInputValue(params));\n        });\n      },\n      clearSelectedItems(params) {\n        const { context, flush } = params;\n        flush(() => {\n          context.set(\"value\", []);\n          context.set(\"inputValue\", getInputValue(params));\n        });\n      },\n      scrollContentToTop({ prop, scope }) {\n        const scrollToIndexFn = prop(\"scrollToIndexFn\");\n        if (scrollToIndexFn) {\n          scrollToIndexFn({ index: 0, immediate: true });\n        } else {\n          const contentEl = getContentEl(scope);\n          if (!contentEl) return;\n          contentEl.scrollTop = 0;\n        }\n      },\n      invokeOnOpen({ prop }) {\n        prop(\"onOpenChange\")?.({ open: true });\n      },\n      invokeOnClose({ prop }) {\n        prop(\"onOpenChange\")?.({ open: false });\n      },\n      highlightFirstItem({ context, prop, scope }) {\n        const exec = getContentEl(scope) ? queueMicrotask : raf;\n        exec(() => {\n          const value = prop(\"collection\").firstValue;\n          if (value) context.set(\"highlightedValue\", value);\n        });\n      },\n      highlightFirstItemIfNeeded({ computed, action }) {\n        if (!computed(\"autoHighlight\")) return;\n        action([\"highlightFirstItem\"]);\n      },\n      highlightLastItem({ context, prop, scope }) {\n        const exec = getContentEl(scope) ? queueMicrotask : raf;\n        exec(() => {\n          const value = prop(\"collection\").lastValue;\n          if (value) context.set(\"highlightedValue\", value);\n        });\n      },\n      highlightNextItem({ context, prop }) {\n        let value = null;\n        const highlightedValue = context.get(\"highlightedValue\");\n        const collection2 = prop(\"collection\");\n        if (highlightedValue) {\n          value = collection2.getNextValue(highlightedValue);\n          if (!value && prop(\"loopFocus\")) value = collection2.firstValue;\n        } else {\n          value = collection2.firstValue;\n        }\n        if (value) context.set(\"highlightedValue\", value);\n      },\n      highlightPrevItem({ context, prop }) {\n        let value = null;\n        const highlightedValue = context.get(\"highlightedValue\");\n        const collection2 = prop(\"collection\");\n        if (highlightedValue) {\n          value = collection2.getPreviousValue(highlightedValue);\n          if (!value && prop(\"loopFocus\")) value = collection2.lastValue;\n        } else {\n          value = collection2.lastValue;\n        }\n        if (value) context.set(\"highlightedValue\", value);\n      },\n      highlightFirstSelectedItem({ context, prop }) {\n        raf(() => {\n          const [value] = prop(\"collection\").sort(context.get(\"value\"));\n          if (value) context.set(\"highlightedValue\", value);\n        });\n      },\n      highlightFirstOrSelectedItem({ context, prop, computed }) {\n        raf(() => {\n          let value = null;\n          if (computed(\"hasSelectedItems\")) {\n            value = prop(\"collection\").sort(context.get(\"value\"))[0];\n          } else {\n            value = prop(\"collection\").firstValue;\n          }\n          if (value) context.set(\"highlightedValue\", value);\n        });\n      },\n      highlightLastOrSelectedItem({ context, prop, computed }) {\n        raf(() => {\n          const collection2 = prop(\"collection\");\n          let value = null;\n          if (computed(\"hasSelectedItems\")) {\n            value = collection2.sort(context.get(\"value\"))[0];\n          } else {\n            value = collection2.lastValue;\n          }\n          if (value) context.set(\"highlightedValue\", value);\n        });\n      },\n      autofillInputValue({ context, computed, prop, event, scope }) {\n        const inputEl = getInputEl(scope);\n        const collection2 = prop(\"collection\");\n        if (!computed(\"autoComplete\") || !inputEl || !event.keypress) return;\n        const valueText = collection2.stringify(context.get(\"highlightedValue\"));\n        raf(() => {\n          inputEl.value = valueText || context.get(\"inputValue\");\n        });\n      },\n      syncSelectedItems(params) {\n        const { context, prop } = params;\n        const inputValue = match(prop(\"selectionBehavior\"), {\n          preserve: context.get(\"inputValue\"),\n          replace: prop(\"collection\").stringifyMany(context.get(\"value\")),\n          clear: \"\"\n        });\n        context.set(\"selectedItems\", getSelectedItems(params));\n        context.set(\"inputValue\", inputValue);\n      },\n      syncHighlightedItem({ context, prop }) {\n        const item = prop(\"collection\").find(context.get(\"highlightedValue\"));\n        context.set(\"highlightedItem\", item);\n      },\n      toggleVisibility({ event, send, prop }) {\n        send({ type: prop(\"open\") ? \"CONTROLLED.OPEN\" : \"CONTROLLED.CLOSE\", previousEvent: event });\n      }\n    }\n  }\n});\nfunction getInputValue({ context, prop }) {\n  return match(prop(\"selectionBehavior\"), {\n    preserve: context.get(\"inputValue\"),\n    replace: context.get(\"valueAsString\"),\n    clear: \"\"\n  });\n}\nfunction getSelectedItems({ context, prop }) {\n  const collection2 = prop(\"collection\");\n  return context.get(\"value\").map((v) => {\n    const foundItem = context.get(\"selectedItems\").find((item) => collection2.getItemValue(item) === v);\n    if (foundItem) return foundItem;\n    return collection2.find(v);\n  });\n}\nvar props = createProps()([\n  \"allowCustomValue\",\n  \"autoFocus\",\n  \"closeOnSelect\",\n  \"collection\",\n  \"composite\",\n  \"defaultHighlightedValue\",\n  \"defaultInputValue\",\n  \"defaultOpen\",\n  \"defaultValue\",\n  \"dir\",\n  \"disabled\",\n  \"disableLayer\",\n  \"form\",\n  \"getRootNode\",\n  \"highlightedValue\",\n  \"id\",\n  \"ids\",\n  \"inputBehavior\",\n  \"inputValue\",\n  \"invalid\",\n  \"loopFocus\",\n  \"multiple\",\n  \"name\",\n  \"navigate\",\n  \"onFocusOutside\",\n  \"onHighlightChange\",\n  \"onInputValueChange\",\n  \"onInteractOutside\",\n  \"onOpenChange\",\n  \"onOpenChange\",\n  \"onPointerDownOutside\",\n  \"onSelect\",\n  \"onValueChange\",\n  \"open\",\n  \"openOnChange\",\n  \"openOnClick\",\n  \"openOnKeyPress\",\n  \"placeholder\",\n  \"positioning\",\n  \"readOnly\",\n  \"required\",\n  \"scrollToIndexFn\",\n  \"selectionBehavior\",\n  \"translations\",\n  \"value\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemGroupLabelProps = createProps()([\"htmlFor\"]);\nvar splitItemGroupLabelProps = createSplitProps(itemGroupLabelProps);\nvar itemGroupProps = createProps()([\"id\"]);\nvar splitItemGroupProps = createSplitProps(itemGroupProps);\nvar itemProps = createProps()([\"item\", \"persistFocus\"]);\nvar splitItemProps = createSplitProps(itemProps);\n\nexport { anatomy, collection, connect, itemGroupLabelProps, itemGroupProps, itemProps, machine, props, splitItemGroupLabelProps, splitItemGroupProps, splitItemProps, splitProps };\n"],
  "mappings": "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",
  "names": ["match", "options", "query"]
}
