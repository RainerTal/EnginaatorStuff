#include <Arduino.h>
#include <hp_BH1750.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <esp_now.h>
#include <esp_wifi.h>

// ------------ Wi‑Fi / HTTP settings -------------------------
const char* ssid       = "IIIIllllllIIIIllIII";
const char* password   = "julmsaladus";
const char* serverURL  = "http://192.168.150.176:5000/data";

// ------------ BH1750 & relay --------------------------------
hp_BH1750 BH1750;
const int RELAY2_PIN = 26;

// ------------ ESP‑NOW settings ------------------------------
// Replace this with the MAC of your soil‑sensor ESP32, or use broadcast (FF:FF:FF:FF:FF:FF)
uint8_t senderAddress[] = { 0xAC, 0x15, 0x18, 0x9E, 0x3F, 0x58 };

// Must match the sender’s struct
typedef struct struct_message {
  int Soil;
} struct_message;

// Hold last received soil
volatile int lastSoil = -1;

// ------------------------------------------------------------
void onDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len){
  if(len == sizeof(struct_message)){
    struct_message msg;
    memcpy(&msg, incomingData, sizeof(msg));
    lastSoil = msg.Soil;
    char macStr[18];
    snprintf(macStr, sizeof(macStr),
             "%02X:%02X:%02X:%02X:%02X:%02X",
             mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    Serial.printf("ESP‑NOW from %s → Soil=%d\n", macStr, lastSoil);
  }
}

void setup() {
  Serial.begin(115200);
  delay(100);

  // --- 1) Relay & BH1750 init -------------------------------
  pinMode(RELAY2_PIN, OUTPUT);
  digitalWrite(RELAY2_PIN, HIGH); // OFF (LOW‑trigger)
  bool ok = BH1750.begin(BH1750_TO_GROUND);
  if(!ok){
    Serial.println("BH1750 not found!");
    while(true) delay(1000);
  }

  // --- 2) Connect to Wi‑Fi ----------------------------------
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("WiFi: connecting");
  while(WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nWiFi connected, IP = " + WiFi.localIP().toString());

  // --- 3) Init ESP‑NOW --------------------------------------
  if(esp_now_init() != ESP_OK){
    Serial.println("ESP‑NOW init failed");
    while(true) delay(1000);
  }
  esp_now_register_recv_cb(onDataRecv);

  // --- 4) Register sender as peer ---------------------------
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, senderAddress, 6);
  peerInfo.channel = 0;       // use current Wi‑Fi channel
  peerInfo.encrypt = false;
  if(esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add ESP‑NOW peer");
    // Not fatal if you only want to receive broadcasts
  }
}

void loop() {
  // --- A) Measure lux & drive relay -------------------------
  BH1750.start();
  float lux = BH1750.getLux();
  Serial.printf("Lux = %.1f\n", lux);
  if(lux >= 100.0 || lux <= 20.0){
    digitalWrite(RELAY2_PIN, HIGH);   // ON (LOW‑trigger)
    Serial.println("Relay2 ON");
  } else {
    digitalWrite(RELAY2_PIN, LOW);    // OFF
    Serial.println("Relay2 OFF");
  }

  // --- B) HTTP POST to Flask --------------------------------
  if(WiFi.status() == WL_CONNECTED){
    HTTPClient http;
    http.begin(serverURL);
    http.addHeader("Content-Type", "application/json");
    String payload = "{\"Lux\":" + String(lux) + "}";
    int code = http.POST(payload);
    Serial.println("HTTP POST → " + String(code));
    http.end();
  } else {
    Serial.println("WiFi disconnected");
  }

  // --- C) (Optional) use lastSoil ---------------------------
  if(lastSoil >= 0){
    Serial.println("Last Soil value received: " + String(lastSoil));
    // e.g. trigger something off soil, or forward it via HTTP...
  }

  delay(2000);
}
