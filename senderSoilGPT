#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <esp_wifi.h>
#include <esp_now.h>

// --- Wi‑Fi / HTTP settings --------------------------------
const char *ssid = "IIIIllllllIIIIllIII";
const char *password = "julmsaladus";
const char *serverURL = "http://192.168.150.176:5000/data";

// --- ESP‑NOW peer MAC (the other ESP32) -------------------
uint8_t peerAddress[] = {0xAC, 0x15, 0x18, 0x9E, 0x3F, 0x58};

// --- Data structure for ESP‑NOW ----------------------------
typedef struct struct_message
{
    int Soil;
} struct_message;
struct_message outgoingMsg;

// --- Forward declares --------------------------------------
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);

// ----------------------------------------------------------------
void setup()
{
    Serial.begin(115200);
    delay(100);

    // --- 1) Connect to Wi‑Fi ----------------------------------
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    Serial.print("WiFi: connecting");
    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(500);
    }
    Serial.println("\nWiFi connected! IP = " + WiFi.localIP().toString());

    // --- 2) Init ESP‑NOW --------------------------------------
    if (esp_now_init() != ESP_OK)
    {
        Serial.println("ESP‑NOW init failed");
        while (true)
        {
            delay(1000);
        }
    }
    esp_now_register_send_cb(onDataSent);

    // --- 3) Register peer -------------------------------------
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, peerAddress, 6);
    peerInfo.channel = 0; // use current Wi‑Fi channel
    peerInfo.encrypt = false;
    if (esp_now_add_peer(&peerInfo) != ESP_OK)
    {
        Serial.println("Failed to add ESP‑NOW peer");
        while (true)
        {
            delay(1000);
        }
    }
}

// ----------------------------------------------------------------
void loop()
{
    // --- A) Read sensor ---------------------------------------
    int sensorValue = analogRead(A0);
    Serial.println("Soil = " + String(sensorValue));

    // --- B) Send HTTP POST -----------------------------------
    if (WiFi.status() == WL_CONNECTED)
    {
        HTTPClient http;
        http.begin(serverURL);
        http.addHeader("Content-Type", "application/json");
        String payload = "{\"Soil\":" + String(sensorValue) + "}";
        int code = http.POST(payload);
        Serial.println("HTTP POST → " + String(code));
        http.end();
    }
    else
    {
        Serial.println("WiFi not connected, skipping HTTP");
    }

    // --- C) Send via ESP‑NOW ---------------------------------
    outgoingMsg.Soil = sensorValue;
    esp_err_t res = esp_now_send(peerAddress, (uint8_t *)&outgoingMsg, sizeof(outgoingMsg));
    if (res != ESP_OK)
    {
        Serial.println("ESP‑NOW send error: " + String(res));
    }

    delay(2000);
}

// ----------------------------------------------------------------
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status)
{
    char macStr[18];
    snprintf(macStr, sizeof(macStr),
             "%02X:%02X:%02X:%02X:%02X:%02X",
             mac_addr[0], mac_addr[1], mac_addr[2],
             mac_addr[3], mac_addr[4], mac_addr[5]);
    Serial.printf("ESP‑NOW to %s → %s\n",
                  macStr,
                  (status == ESP_NOW_SEND_SUCCESS) ? "SUCCESS" : "FAIL");
}
